package io.cloudbeat.common.reporter;

import com.google.common.base.Stopwatch;
import io.cloudbeat.common.client.CbApiClient;
import io.cloudbeat.common.model.*;
import io.cloudbeat.common.config.CbConfig;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

import javax.swing.text.html.Option;
import java.io.IOException;
import java.util.*;

public class CbTestReporter {
    //private static final Logger LOGGER = LoggerFactory.getLogger(CbTestReporter.class);
    private final static String TEST_RESULTS_FILENAME = ".CB_TEST_RESULTS";
    private final String language = "java";

    private CbApiClient cbClient;
    private CbConfig config;
    private Instance instance;
    private String frameworkName;
    private String frameworkVersion;
    private TestResult result;
    private boolean isStarted = false;

    public CbTestReporter(CbConfig config) {
        this.config = config;
        this.cbClient = new CbApiClient();
    }

    public Optional<Instance> getInstance() {
        if (instance == null)
            return Optional.empty();
        return Optional.of(instance);
    }

    public boolean isStarted() {
        return  isStarted;
    }

    public void setFramework(final String frameworkName) {
        this.setFramework(frameworkName, null);
    }

    public void setFramework(final String frameworkName, final String frameworkVersion) {
        this.frameworkName = frameworkName;
        this.frameworkVersion = frameworkVersion;
    }

    public void startInstance() {
        // ignore this call if instance has been already initialized
        if (instance != null)
            return;
        if (config.getInstanceId() != null)
            instance = new Instance(config.getInstanceId(), config.getRunId(), config.getCapabilities());
        else
            instance = new Instance(null, config.getRunId(), config.getCapabilities());
        instance.setStatus(RunStatus.RUNNING);
        if (instance.isRunIdAutoGenerated())
            cbClient.startRun(instance.getRunId(), config.getProjectId(), RunStatus.RUNNING);

        if (instance.isInstanceIdAutoGenerated())
            cbClient.startInstance(instance.getId(), instance.getRunId(), RunStatus.RUNNING, instance.getAttributes());
        else
            cbClient.postInstanceStatus(instance.getRunId(), instance.getId(), instance.getStatus());
        result = new TestResult(instance.getRunId(), instance.getId());
        isStarted = true;
    }

    public void endInstance() {
        if (instance == null)
            return;
        TestStatus finalStatus = calculateFinalTestStatus();
        result.end(finalStatus);
        instance.setStatus(RunStatus.FINISHED);
        cbClient.endInstance(instance.getId(), instance.getRunId(), finalStatus);
        if (instance.isRunIdAutoGenerated())
            cbClient.endRun(instance.getRunId());
        isStarted = false;
    }

    private TestStatus calculateFinalTestStatus() {
        return TestStatus.PASSED;
    }

    public void startSuite(final String name, final String fqn) {
        final SuiteResult suite = result.addNewSuite(name);
        suite.setFqn(fqn);
    }

    public void endSuite(String fqn) {
        result.getLastSuite(fqn).ifPresent(suite -> {
           suite.end();
        });
    }

    public void startCase(final String name, final String fqn) throws Exception {
        SuiteResult suiteResult = result.getLastSuite().orElseThrow(
                () -> new Exception("No started suite was found. You must call startSuite first.")
        );
        CaseResult caseResult = suiteResult.addNewCaseResult(name);
        caseResult.setFqn(fqn);
    }

    public void endCase(final String caseFqn, final String suiteFqn, final TestStatus status, final Throwable exception) throws Exception {
        SuiteResult suiteResult = result.getLastSuite(suiteFqn).orElseThrow(
                () -> new Exception("Cannot find started suite: " + suiteFqn)
        );
        CaseResult caseResult = suiteResult.getLastCase(caseFqn).orElseThrow(
                () -> new Exception("Cannot find started case: " + caseFqn)
        );
        caseResult.end(status);
        if (exception != null)
            caseResult.setFailure(exception);
    }

    public void passCase(final String caseFqn, final String suiteFqn) throws Exception {
        endCase(caseFqn, suiteFqn, TestStatus.PASSED, null);
    }

    public void failCase(final String caseFqn, final String suiteFqn, Throwable exception) throws Exception {
        endCase(caseFqn, suiteFqn, TestStatus.FAILED, exception);
    }

    public void skipCase(final String caseFqn, final String suiteFqn) throws Exception {
        endCase(caseFqn, suiteFqn, TestStatus.IGNORED, null);
    }

    public void startStep(final String name, final String fqn, final List<String> args) {

    }

    public void endStep() {

    }

    /*
    private void loadConfig() {
        String payloadpath = System.getProperty("payloadpath");;
        String testmonitorUrl = System.getProperty("testmonitorurl");
        testMonitorToken = System.getProperty("testmonitortoken");

        try {
            if (payloadpath != null && testmonitorUrl != null && testMonitorToken != null) {
                testMonitorStatusUrl = testmonitorUrl + "/status";
                payload = CbConfig.load(payloadpath);
            }
            else {
                logInfo("Plugin will be disabled. One of payloadpath, testmonitorurl, or testmonitortoken parameters is missing.");
            }
        }
        catch (IOException e) {
            logError("Unable to load CloudBeat configuration settings.", e);
            //LOGGER.error("Unable to load CloudBeat configuration settings.", e);
        }
        // TODO: make sure we throw an exception or handle in some other way the situation
        // where no configuration parameters where provided (e.g. when user runs test outside CB environment)
    }*/

    private void logError(String message) {
        System.err.println("[CloudBeat] " + message);
    }

    private void logError(String message, Exception e) {
        System.err.println("[CloudBeat] " + message);
        e.printStackTrace();
    }

    private void logInfo(String message) {
        System.out.println("[CloudBeat] " + message);
    }


}
